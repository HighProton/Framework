--[[
	--[FriendUtil]--
	Functions:
		FriendUtil.GetAllFriends(Player: Player): {[Player]: FriendFormat} -- Retrieves all of passed players friends, this is useful as you wouldn't have to iterate through the pages.
		FriendUtil.GetAllFriendsInGame(Player: Player): {Player} -- Retrieves all friends in-game current server.
]]

--// Services
local Players = game:GetService("Players")

--// Types
type FriendFormat = {
	AvatarFinal: boolean,
	AvatarUri: string,
	DisplayName: string,
	Id: number,
	IsOnline: boolean,
	Username: string,
}

--// Constants
local FriendUtil = {}

--// Global Functions
function FriendUtil.GetAllFriends(Player: Player): {[Player]: FriendFormat}
	local FriendsList = {}
	
	local Friends = Players:GetFriendsAsync(Player.UserId)
	
	while true do
		local CurrentPage = Friends:GetCurrentPage()
		
		for _, Friend in pairs(CurrentPage) do
			table.insert(FriendsList, Friend)
		end
		
		if Friends.IsFinished then
			break
		else
			Friends:AdvanceToNextPageAsync()
		end
	end
	
	return FriendsList
end

function FriendUtil.GetAllFriendsInGame(Player: Player): {Player}
	local InGameFriends = {}
	
	for _, InGamePlayer in ipairs(Players:GetPlayers()) do
		if not Player:IsFriendsWith(InGamePlayer.UserId) then
			continue
		end
		InGameFriends[InGamePlayer] = Player
	end
	
	return InGameFriends
end

return FriendUtil
